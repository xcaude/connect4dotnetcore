@page "/game/{gameId:int}"
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Text.Json
@using System.Text
@using Connect4Game.Domain.Model
@using Connect4Game.Common.Dto
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="css/game.css" />

<h3>Connect4 Game</h3>

@if (game == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="game-details">
        <p class="game-name">Game: @game.Name</p>
        <p class="status">Status: @game.Status</p>
        <p class="username">Host: @game.Host.UserName</p>
        <p class="username">Guest: @(game.Guest?.UserName ?? "Awaiting Guest")</p>
        <p class="current-turn @(game.CurrentTurn == game.Host ? "current-turn-host" : "current-turn-guest")">
            Current Turn: @(game.CurrentTurn?.UserName ?? "Awaiting Guest")
        </p>
        @if (game.Winner != null)
        {
            <p class="username">Winner: @game.Winner.UserName</p>
        }
    </div>
    <div class="grid-container">
        @for (int row = 0; row < 6; row++)
        {
            <div class="grid-row">
                @for (int col = 0; col < 7; col++)
                {
                    var cellIndex = row * 7 + col;
                    var cell = game.Grid[cellIndex];
                    int capturedCol = col; // Capture the current value of col
                    <div class="grid-cell" @onclick="() => PlayTurn(capturedCol)">
                        @(cell == '0' ? "Empty" : (cell == 'R' ? "Red" : "Yellow"))
                    </div>
                }
            </div>
        }
    </div>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="error-message">@errorMessage</p>
    }
}

@code {
    [Parameter] public int gameId { get; set; }
    private Connect4Game.Domain.Model.Game game;
    private string jwtToken;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        jwtToken = await JS.InvokeAsync<string>("localStorage.getItem", "jwtToken");
        await LoadGameDetails();
    }

    private async Task LoadGameDetails()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, $"http://localhost:5034/api/games/{gameId}");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", jwtToken);

        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            game = JsonSerializer.Deserialize<Connect4Game.Domain.Model.Game>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }
        else
        {
            errorMessage = "Failed to load game details";
            Console.WriteLine($"Error: {response.ReasonPhrase}");
        }
    }

    private async Task PlayTurn(int column)
    {
        errorMessage = string.Empty;

        var playTurnRequest = new PlayTurnRequest { Column = column };
        var jsonContent = new StringContent(JsonSerializer.Serialize(playTurnRequest), Encoding.UTF8, "application/json");

        var request = new HttpRequestMessage(HttpMethod.Post, $"http://localhost:5034/api/games/{gameId}/play")
        {
            Content = jsonContent
        };
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", jwtToken);
        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

        try
        {
            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var gridDto = JsonSerializer.Deserialize<GridDto>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                game.Grid = gridDto.Grid;
            }
            else
            {
                errorMessage = "Failed to play turn";
                Console.WriteLine($"Error: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during play turn.";
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }
}